/* ====================================================================
 * $Source: C:/work/999_CVSRep/jas/source/org/jas/util/resource/config/dao_template_ja.properties,v $
 * $Author: zhangxj $
 * $Revision: 1.1 $
 * $Date: 2007/12/20 01:58:27 $
 * ====================================================================
 *  ファイル  $CLASS_NAME.java
 *  機能名    $CLASS_DESCRIPTION
 *  履歴      $CREATE_DATE  作成            $AUTHOR
 *           Copyright 2002 SJNS. All Rights Reserved.
 * ====================================================================
 */
$PACKAGE_DEFINE
$IMPORT_CLASSES_DEFINE
/**
 * $CLASS_DESCRIPTION
 *
 * @author     $AUTHOR
 * @version    $VERSION
 */
public class $CLASS_NAME {

	/**
	 * ＤＢから検索条件によってデータリストを取得する
	 *
	 * @param conn ＤＢ接続ハンドル
	 *
	 * @return データリスト
	 * @exception SQLException ＤＢエクセプション
	 */
	public static ArrayList doSelect(Connection conn) throws SQLException {
		// 返すデータ構造体初期化
		ArrayList resultList = new ArrayList();
		// ＤＢステートメント定義
		PreparedStatement pstmt = null;

		// 検索ＳＱＬ文定義
		String sSql = " SELECT "
<LOOP_COLUMN>					+ " 	$COLUMN_NAME "
</LOOP_COLUMN>					+ " FROM "
					+ " 	$TABLE_NAME ";

		try {
			// 検索ステートメントの取得
			pstmt = conn.prepareStatement(sSql);
			// 検索を行う
			ResultSet rs = pstmt.executeQuery();

			// データを取得
			while (rs.next()) {
				$DATA_CLASS_NAME oneData = new $DATA_CLASS_NAME();

<LOOP_COLUMN>				oneData.set$UPPER_COLUMN_NAME(rs.get$COLUMN_TYPE_NAME("$COLUMN_NAME"));
</LOOP_COLUMN>
				resultList.add(oneData);
			}
		} finally {
			if (pstmt != null) {
				pstmt.close();
			}
		}

		return resultList;
	}

	/**
	 * ＤＢに、一つのレコードを挿入する
	 *
	 * @param conn ＤＢ接続ハンドル
	 * @param oneData 一つのデータ構造体
	 *
	 * @exception SQLException ＤＢエクセプション
	 */
	public static void doInsert(Connection conn, $DATA_CLASS_NAME oneData) throws SQLException {
		// ＤＢステートメント定義
		PreparedStatement pstmt = null;

		// 挿入ＳＱＬ文定義
		String iSql = " INSERT INTO $TABLE_NAME( "
<LOOP_COLUMN>					+ " 	$COLUMN_NAME "
</LOOP_COLUMN>					+ " ) VALUES ( "
<LOOP_COLUMN>					+ " 	?, "
</LOOP_COLUMN>					+ " )";

		try {
			// ステートメントの取得
			pstmt = conn.prepareStatement(iSql);

			// データを設定する
<LOOP_COLUMN>			pstmt.set$COLUMN_TYPE_NAME(oneData.get$UPPER_COLUMN_NAME);
</LOOP_COLUMN>
			// 挿入を行う
			pstmt.executeUpdate();
		} finally {
			if (pstmt != null) {
				pstmt.close();
			}
		}
	}

	/**
	 * ＤＢに、一つのレコードを更新する
	 *
	 * @param conn ＤＢ接続ハンドル
	 * @param oneData 一つのデータ構造体
	 *
	 * @exception SQLException ＤＢエクセプション
	 */
	public static void doUpdate(Connection conn, $DATA_CLASS_NAME oneData) throws SQLException {
		// ＤＢステートメント定義
		PreparedStatement pstmt = null;

		// 更新ＳＱＬ文定義
		String iSql = " UPDATE $TABLE_NAME SET "
<LOOP_COLUMN>					+ " 	$COLUMN_NAME = ?"
</LOOP_COLUMN>					+ " )";

		try {
			// ステートメントの取得
			pstmt = conn.prepareStatement(iSql);

			// データを設定する
<LOOP_COLUMN>			pstmt.set$COLUMN_TYPE_NAME(oneData.get$UPPER_COLUMN_NAME);
</LOOP_COLUMN>
			// 挿入を行う
			pstmt.executeUpdate();
		} finally {
			if (pstmt != null) {
				pstmt.close();
			}
		}
	}

	/**
	 * ＤＢに、一つのレコードを削除する
	 *
	 * @param conn ＤＢ接続ハンドル
	 * @param oneData 一つのデータ構造体
	 *
	 * @exception SQLException ＤＢエクセプション
	 */
	public static void doDelete(Connection conn) throws SQLException {
		// ＤＢステートメント定義
		PreparedStatement pstmt = null;

		// 挿入ＳＱＬ文定義
		String iSql = " DELETE FROM $TABLE_NAME "
					+ " WHERE "
<LOOP_KEYCOLUMN>					+ " 	?, "
</LOOP_KEYCOLUMN>					+ " )";

		try {
			// ステートメントの取得
			pstmt = conn.prepareStatement(iSql);

			// データを設定する
<LOOP_KEYCOLUMN>			pstmt.set$COLUMN_TYPE_NAME(oneData.get$UPPER_COLUMN_NAME);
</LOOP_KEYCOLUMN>
			// 挿入を行う
			pstmt.executeUpdate();
		} finally {
			if (pstmt != null) {
				pstmt.close();
			}
		}
	}
}
